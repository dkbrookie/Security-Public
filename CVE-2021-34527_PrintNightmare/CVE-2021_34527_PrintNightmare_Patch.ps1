<#
    Table of Contents (Use find to jump):

    - Constants
    - Init vars
    - Gather info from environment
    - Hash Tables and Arrays for Days (setting up download URLs and applicable KB numbers)
    - Mitigation helper functions
    - Answer important questions
    - Early exit points
    - MITIGATION: Here is where the actual work starts
#>

<# ------------------------ Constants ------------------------------------- #>

$driverPath = "$ENV:windir\System32\spool\drivers"
$PnpRegPath = 'HKLM:\\SOFTWARE\Policies\Microsoft\Windows NT\Printers\PointAndPrint'
$ltPath = "$ENV:windir\LTSvc"
$printNightmarePath = "$ltPath\security\printnightmare"
$patchDir = "$ltPath\Patching"

<# ------------------------ Init vars ------------------------------------- #>
# $output is an array that will hold various messages throughout the mitigation process
# and will eventually be returned as a single string joined together
$output = @()

# $os will be the os name + architecture (when necessary)
$os = ''

# If OS has compatible patch
$compatibleOs = 0
# If ACL mitigation is currently applied
$mitigationApplied = 0
# If patch is installed
$patchApplied = 0
# If Point and Print vulnerable features are disabled according to registry
$pnpDisabled = 0
# If Machine is protected from the vulnerability in some manner
$protected = 0
# If machine has restrictDriverInstallationToAdministrators enabled in registry
$restrictDriverInstallation = 0

# Will hold saved pnp reg settings state if exists
$originalPnpDisabledValue = ''

# possibly for future use.. can't find win10 example or way to test validity of approach
# $ESUWin7Year1 = (Get-WmiObject softwarelicensingproduct -filter "ID='77db037b-95c3-48d7-a3ab-a9c6d41093e0'" | Select LicenseStatus)
# $ESUWin7Year2 = (Get-WmiObject softwarelicensingproduct -filter "ID='0e00c25d-8795-4fb7-9572-3803d91b6880'" | Select LicenseStatus)
# $ESUWin7Year3 = (Get-WmiObject softwarelicensingproduct -filter "ID='4220f546-f522-46df-8202-4d07afd26454'" | Select LicenseStatus)
# $ESUWin2008Year1 = (Get-WmiObject softwarelicensingproduct -filter "ID='553673ed-6ddf-419c-a153-b760283472fd'" | Select LicenseStatus)
# $ESUWin2008Year2 = (Get-WmiObject softwarelicensingproduct -filter "ID='04fa0286-fa74-401e-bbe9-fbfbb158010d'" | Select LicenseStatus)
# $ESUWin2008Year3 = (Get-WmiObject softwarelicensingproduct -filter "ID='16c08c85-0c8b-4009-9b2b-f1f7319e45f9'" | Select LicenseStatus)

<# ------------------------ Gather info from environment ------------------------------------- #>

## Set simple names for OS' since things like R2 versions are complicated to parse out in swich statements
$osDeets = Get-WmiObject win32_operatingsystem
$osName = $osDeets.Caption
$osArch = $osDeets.OSArchitecture

If ($osName -like 'Microsoft Windows Server 2008*' -and $osName -notlike '*R2*') {
    $os = "2008_$osArch"
} ElseIf ($osName -like 'Microsoft Windows Server 2008 R2*') {
    $os = '2008r2'
} ElseIf ($osName -like 'Microsoft Windows Server 2012*' -and $osName -notlike '*R2*') {
    $os = '2012'
} ElseIf ($osName -like 'Microsoft Windows Server 2012 R2*') {
    $os = '2012r2'
} ElseIf ($osName -like 'Microsoft Windows Server 2016*') {
    $os = '2016'
} ElseIf ($osName -like 'Microsoft Windows Server 2019*') {
    $os = '2019'
} ElseIf ($osName -like 'Microsoft Windows 10*') {
    # get raw Windows version
    [int64]$rawVersion = [Windows.System.Profile.AnalyticsInfo,Windows.System.Profile,ContentType=WindowsRuntime].GetMember('get_VersionInfo').Invoke( $Null, $Null ).DeviceFamilyVersion

    # decode bits to version bytes
    $build = ( $rawVersion -band 0x00000000FFFF0000l ) -shr 16

    Switch ($build) {
        19044 { $os = '21H2' }
        19043 { $os = '21H1' }
        19042 { $os = '20H2' }
        19041 { $os = '2004' }
        18363 { $os = '1909' }
        18362 { $os = '1903' }
        17763 { $os = '1809' }
        17134 { $os = '1803' }
        17134 { $os = '1803' }
        16299 { $os = '1709' }
        15063 { $os = '1703' }
        14393 { $os = '1607' }
        10586 { $os = '1511' }
        10240 { $os = '1507' }
        Default { $os = 'Unknown'; "Build is $build, which must be a new version of Windows. Assuming machine is patched because PrintNightmare patches must have already existed when this OS was released."; }
    }

    $os += "_$osArch"
} ElseIf ($osName -like 'Microsoft Windows 8*') {
    $os = "8.1_$osArch"
} ElseIf ($osName -like 'Microsoft Windows 7*') {
    $os = "7_$osArch"
}

<# ------------------------ Hash Tables and Arrays for Days (setting up download URLs and applicable KB numbers) ------------------------------------- #>

# Also applies to 2008r2
$win7PatchKbs = @(
    'KB5004951'
)

$2008PatchKbs = @(
    'KB5004959'
)

# Also applies to 2012r2
$8PatchKbs = @(
    'KB5004958'
)

$1507PatchKbs = @(
    'KB5004950',
    'KB5004249',
    'KB5005569',
    'KB5006675',
    'KB5007207',
    'KB5005040'
)

# Also applies to server 2016
$1607PatchKbs = @(
    'KB5004948',
    'KB5004238',
    'KB5005393',
    'KB5005573',
    'KB5006669',
    'KB5007192',
    'KB5008601',
    'KB5005043'
)

# Also applies to server 2019
$1809PatchKbs = @(
    'KB5004947',
    'KB5004244',
    'KB5005394',
    'KB5004308',
    'KB5005102',
    'KB5005568',
    'KB5005625',
    'KB5006672',
    'KB5006744',
    'KB5007206',
    'KB5008602',
    'KB5007266',
    'KB5005030'
)

$1909PatchKbs = @(
    'KB5004946',
    'KB5004245',
    'KB5004293',
    'KB5005103',
    'KB5005566',
    'KB5005624',
    'KB5006667',
    'KB5007189',
    'KB5007253',
    'KB5005031'
)

$2004AndNewerSsuKb = 'KB5005260'
$2004To21H1PatchKbs = @(
    'KB5004945',
    'KB5004237',
    'KB5004296',
    'KB5005565',
    'KB5005101',
    'KB5005611',
    'KB5006670',
    'KB5006738',
    'KB5007186',
    'KB5007253',
    'KB5005033'
)

$21H2PatchKbs = @(
    'KB5005565',
    'KB5006670',
    'KB5007186',
    'KB5007253'
)

$msDPath = 'http://download.windowsupdate.com/d/msdownload/update/software/secu'
$msCPath = 'http://download.windowsupdate.com/c/msdownload/update/software/secu'

Switch ($os) {
    '7_32-bit' {
        $installHash = @{
            ssu =              'KB5004378'
            patchKBs =         $win7PatchKbs
            patchUrl =         "$msDPath/2021/07/windows6.1-kb5004951-x86_09808f3b8a74ce862f6e21ba36617c5b9bd53a3d.msu"
            ssuUrl =           "$msDPath/2021/07/windows6.1-kb5004378-x86_7f71df13245adc8c835fccdeba92303b08e26a10.msu"
        }
    }
    '7_64-bit' {
        $installHash = @{
            ssu =              'KB5004378'
            patchKBs =         $win7PatchKbs
            patchUrl =         "$msCPath/2021/07/windows6.1-kb5004951-x64_2fcf9eaa66615884884cc1cb9f75fc96294cbf2a.msu"
            ssuUrl =           "$msDPath/2021/07/windows6.1-kb5004378-x64_e295e0dfb732d1d4712c6aa5ac72aa28a7067359.msu"
        }
    }
    '2008r2' {
        $installHash = @{
            ssu =              'KB5004378'
            patchKBs =         $win7PatchKbs
            patchUrl =         "$msCPath/2021/07/windows6.1-kb5004951-x64_2fcf9eaa66615884884cc1cb9f75fc96294cbf2a.msu"
            ssuUrl =           "$msDPath/2021/07/windows6.1-kb5004378-x64_e295e0dfb732d1d4712c6aa5ac72aa28a7067359.msu"
        }
    }
    '2008_32-bit' {
        $installHash = @{
            ssu =              'KB4580971'
            patchKBs =         $2008PatchKbs
            patchUrl =         "$msCPath/2021/07/windows6.0-kb5004959-x86_7d5c62a788b49b296de559b792a8e1cd5b3fad2d.msu"
            ssuUrl =           "$msDPath/2020/10/windows6.0-kb4580971-x86_5a4cf976c650cf9b6a0800aaf6016726f4b08c7d.msu"
        }

    }
    '2008_64-bit' {
        $installHash = @{
            ssu =              'KB4580971'
            patchKBs =         $2008PatchKbs
            patchUrl =         "$msCPath/2021/07/windows6.0-kb5004959-x64_7bfadd426a5764d3a2886afbb73f727fae5e0f67.msu"
            ssuUrl =           "$msDPath/2020/10/windows6.0-kb4580971-x64_619424830431f3fba3c6d086b5dbe3e1ddf42f1f.msu"
        }
    }
    '8.1_32-bit' {
        $installHash = @{
            ssu =              'KB5001403'
            patchKBs =         $8PatchKbs
            patchUrl =         "$msCPath/2021/07/windows8.1-kb5004958-x86_ee2308010d7605cad53e19a1bc762d85d044d88d.msu"
            ssuUrl =           "$msDPath/2021/04/windows8.1-kb5001403-x86_c59ac03777801436fa01dbf341f164a709ce8f8a.msu"
        }
    }
    '8.1_64-bit' {
        $installHash = @{
            ssu =              'KB5001403'
            patchKBs =         $8PatchKbs
            patchUrl =         "$msCPath/2021/07/windows8.1-kb5004958-x64_8b73440b9c53bcea2660d9409b6ad3920f104cd2.msu"
            ssuUrl =           "$msDPath/2021/04/windows8.1-kb5001403-x64_7f15c4b281f38d43475abb785a32dbaf0355bad5.msu"
        }
    }
    '2012r2' {
        $installHash = @{
            ssu =              'KB5001403'
            patchKBs =         $8PatchKbs
            patchUrl =         "$msCPath/2021/07/windows8.1-kb5004958-x64_8b73440b9c53bcea2660d9409b6ad3920f104cd2.msu"
            ssuUrl =           "$msDPath/2021/04/windows8.1-kb5001403-x64_7f15c4b281f38d43475abb785a32dbaf0355bad5.msu"
        }
    }
    '2012' {
        $installHash = @{
            ssu =              'KB5001401'
            patchUrl =         "$msDPath/2021/07/windows8-rt-kb5004960-x64_15b7362a1146198852b2be37c4997f81e16495b6.msu"
            ssuUrl =           "$msDPath/2021/04/windows8-rt-kb5001401-x64_1027ae2c9888c2dfe0caadeafc506b3012789c56.msu"
            patchKBs = @(
                'KB5004960'
            )
        }
    }
    # 1507-1809 KBs specify they're for Win10 LTSB, so they might be unlikely to install... Not sure how to check at the moment.. related to the ESU question..
    '1507_32-bit' {
        $installHash = @{
            ssu =              'KB5001399'
            patchKBs =         $1507PatchKbs
            patchUrl =         "$msDPath/2021/08/windows10.0-kb5005040-x86_b6cbcefdb22b22a3a8841420d32af34d633a5c7d.msu"
            ssuUrl =           "$msDPath/2021/04/windows10.0-kb5001399-x64_d33c5bf98f9c323bdfd3d7103a5215cb874221a1.msu"
        }
    }
    '1507_64-bit' {
        $installHash = @{
            ssu =              'KB5001399'
            patchKBs =         $1507PatchKbs
            patchUrl =         "$msCPath/2021/08/windows10.0-kb5005040-x64_c9bb0618b0e9b1a50151e38796cd954923d0e202.msu"
            ssuUrl =           "$msDPath/2021/04/windows10.0-kb5001399-x86_e3fe821338f8dcc5b9abc712ce940f34b6ce4f9e.msu"
        }
    }
    '1607_32-bit' {
        $installHash = @{
            ssu =              'KB5001402'
            patchKBs =         $1607PatchKbs
            patchUrl =         "$msDPath/2021/08/windows10.0-kb5005043-x86_7e72b64b264e89ec87cf35af180b43c879b3ef5b.msu"
            ssuUrl =           "$msDPath/2021/04/windows10.0-kb5001402-x86_27a769112966bdc171f5f300bfd4819f02941f5a.msu"
        }
    }
    '1607_64-bit' {
        $installHash = @{
            ssu =              'KB5001402'
            patchKBs =         $1607PatchKbs
            patchUrl =         "$msCPath/2021/08/windows10.0-kb5005043-x64_6e39252b88646ca55582da59e6f86a021d8b6ddd.msu"
            ssuUrl =           "$msDPath/2021/04/windows10.0-kb5001402-x64_0108fcc32c0594f8578c3787babb7d84e6363864.msu"
        }
    }
    '2016' {
        $installHash = @{
            ssu =              'KB5001402'
            patchKBs =         $1607PatchKbs
            patchUrl =         "$msCPath/2021/08/windows10.0-kb5005043-x64_6e39252b88646ca55582da59e6f86a021d8b6ddd.msu"
            ssuUrl =           "$msDPath/2021/04/windows10.0-kb5001402-x64_0108fcc32c0594f8578c3787babb7d84e6363864.msu"
        }
    }
    '1809_32-bit' {
        $installHash = @{
            ssu =              'KB5005112'
            patchKBs =         $1809PatchKbs
            patchUrl =         "$msCPath/2021/08/windows10.0-kb5005030-x86_493fae3f27c82ab210f8bd408e89bc07aea5f5de.msu"
            ssuUrl =           "$msCPath/2021/08/windows10.0-kb5005112-x86_9c52dee3181a27bdc2a3f7dbbc8391c081c6871d.msu"
        }
    }
    '1809_64-bit' {
        $installHash = @{
            ssu =              'KB5005112'
            patchKBs =         $1809PatchKbs
            patchUrl =         "$msCPath/2021/08/windows10.0-kb5005030-x64_222160abfb75f543a693ca773dbcd0553ace6f03.msu"
            ssuUrl =           "$msDPath/2021/08/windows10.0-kb5005112-x64_81d09dc6978520e1a6d44b3b15567667f83eba2c.msu"
        }
    }
    '2019' {
        $installHash = @{
            ssu =              'KB5005112'
            patchKBs =         $1809PatchKbs
            patchUrl =         "$msCPath/2021/08/windows10.0-kb5005030-x64_222160abfb75f543a693ca773dbcd0553ace6f03.msu"
            ssuUrl =           "$msDPath/2021/08/windows10.0-kb5005112-x64_81d09dc6978520e1a6d44b3b15567667f83eba2c.msu"
        }
    }
    '1909_32-bit' {
        $installHash = @{
            ssu =              'KB5005412'
            patchKBs =         $1909PatchKbs
            patchUrl =         "$msCPath/2021/08/windows10.0-kb5005031-x86_38c48394e2f3c067febbdd0219d37d38545715d8.msu"
            ssuUrl =           "$msCPath/2021/08/windows10.0-kb5005412-x86_98f99f0aee4af93a076e5beeb72bf979c4b41f64.msu"
        }
    }
    '1909_64-bit' {
        $installHash = @{
            ssu =              'KB5005412'
            patchKBs =         $1909PatchKbs
            patchUrl =         "$msCPath/2021/08/windows10.0-kb5005031-x64_82d8a430666e65347948420466a0bcfd6c28e344.msu"
            ssuUrl =           "$msCPath/2021/08/windows10.0-kb5005412-x64_228ca7ad27c8f60174513607839c07686490e1e4.msu"
        }
    }
    '2004_32-bit' {
        $installHash = @{
            ssu =              $2004AndNewerSsuKb
            patchKBs =         $2004To21H1PatchKbs
            patchUrl =         "$msDPath/2021/08/windows10.0-kb5005033-x86_d5b969d54b3155cca9ad2e36565e1d8603aab21a.msu"
            ssuUrl =           "$msDPath/2021/08/ssu-19041.1161-x86_8c24024a060d03801fdc05a1dd06dcb874f3c847.msu"
        }
    }
    '2004_64-bit' {
        $installHash = @{
            ssu =              $2004AndNewerSsuKb
            patchKBs =         $2004To21H1PatchKbs
            patchUrl =         "$msDPath/2021/08/windows10.0-kb5005033-x64_ebab415d7a65f0b33f93e9a30875d74baa8930a7.msu"
            ssuUrl =           "$msDPath/2021/08/ssu-19041.1161-x64_e7e052f5cbe97d708ee5f56a8b575262d02cfaa4.msu"
        }
    }
    '20H2_32-bit' {
        $installHash = @{
            ssu =              $2004AndNewerSsuKb
            patchKBs =         $2004To21H1PatchKbs
            patchUrl =         "$msDPath/2021/08/windows10.0-kb5005033-x86_d5b969d54b3155cca9ad2e36565e1d8603aab21a.msu"
            ssuUrl =           "$msDPath/2021/08/ssu-19041.1161-x86_8c24024a060d03801fdc05a1dd06dcb874f3c847.msu"
        }
    }
    '20H2_64-bit' {
        $installHash = @{
            ssu =              $2004AndNewerSsuKb
            patchKBs =         $2004To21H1PatchKbs
            patchUrl =         "$msDPath/2021/08/windows10.0-kb5005033-x64_ebab415d7a65f0b33f93e9a30875d74baa8930a7.msu"
            ssuUrl =           "$msDPath/2021/08/ssu-19041.1161-x64_e7e052f5cbe97d708ee5f56a8b575262d02cfaa4.msu"
        }
    }
    '21H1_32-bit' {
        $installHash = @{
            ssu =              $2004AndNewerSsuKb
            patchKBs =         $2004To21H1PatchKbs
            patchUrl =         "$msDPath/2021/08/windows10.0-kb5005033-x86_d5b969d54b3155cca9ad2e36565e1d8603aab21a.msu"
            ssuUrl =           "$msDPath/2021/08/ssu-19041.1161-x86_8c24024a060d03801fdc05a1dd06dcb874f3c847.msu"
        }
    }
    '21H1_64-bit' {
        $installHash = @{
            ssu =              $2004AndNewerSsuKb
            patchKBs =         $2004To21H1PatchKbs
            patchUrl =         "$msDPath/2021/08/windows10.0-kb5005033-x64_ebab415d7a65f0b33f93e9a30875d74baa8930a7.msu"
            ssuUrl =           "$msDPath/2021/08/ssu-19041.1161-x64_e7e052f5cbe97d708ee5f56a8b575262d02cfaa4.msu"
        }
    }
    # There is no SSU for 21H2
    '21H2_32-bit' {
        $installHash = @{
            patchKBs =         $21H2PatchKbs
            patchUrl =         "http://download.windowsupdate.com/c/msdownload/update/software/updt/2021/11/windows10.0-kb5007253-x86_a623409e4e08af57586dc7fb4d44477ffd4eb099.msu"
        }
    }
    '21H2_64-bit' {
        $installHash = @{
            patchKBs =         $21H2PatchKbs
            patchUrl =         "http://download.windowsupdate.com/d/msdownload/update/software/updt/2021/11/windows10.0-kb5007253-x64_56eae3ea4ddb22105db274b6d903cd73dfaea5ed.msu"
        }
    }
    Default {
        $installHash = @{
            patchKBs = @()
            patchUrl = $Null
            ssuUrl = $Null
            ssu = $Null
        }
    }
}

$successfulInstallationMarkerPath = "$printNightmarePath\$os-$($installHash.patchKBs[-1]).txt"

<# ------------------------ Mitigation helper functions ------------------------------------- #>

function Test-MitigationApplied {
    Return ((Get-Item $driverPath).GetAccessControl('Access')).Access | Where-Object { $_.IdentityReference -eq 'NT AUTHORITY\SYSTEM' -and $_.AccessControlType -eq 'Deny' }
}

function Remove-Mitigation {
    if (Test-MitigationApplied) {
        $driverPath = "$ENV:windir\System32\spool\drivers"
        $Acl = (Get-Item $driverPath).GetAccessControl('Access')
        $Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("System", "Modify", "ContainerInherit, ObjectInherit", "None", "Deny")
        $Acl.RemoveAccessRule($Ar)
        Set-Acl $driverPath $Acl
    }
}

function Apply-Mitigation {
    $BadEventId = 316
    [array]$out

    If ($excludeFromMitigation -eq 1) {
        Remove-Mitigation
        $out += "This machine has been excluded from mitigation. Not restricting permissions on the spooler driver folder."
    } Else {
        $Acl = (Get-Item $driverPath).GetAccessControl('Access')
        $Ar = New-Object  System.Security.AccessControl.FileSystemAccessRule("System", "Modify", "ContainerInherit, ObjectInherit", "None", "Deny")
        $Acl.AddAccessRule($Ar)
        Set-Acl $driverPath $Acl

        If (Test-MitigationApplied) {
            [array]$out += "SYSTEM permissions were successfully set to DENY on the driver folders for the spooler service."
        } Else {
            [array]$out += "There was a problem restricting permission on the spooler driver folder. Output: $($Error[0])"
        }
    }

    <#
        Ensures event log "Microsoft-Windows-PrintService/Operational" is enabled and checks for eventID 316
        on the "$ENV:windir\System32\spool\drivers" directory and its contents, which is the most reliable way
        (at the moment) to check for attempts or success at this exploit
    #>

    Try {
        # Enable logging (disabled by default)
        $logDeets = Get-LogProperties 'Microsoft-Windows-PrintService/Operational'
        $logDeets.Enabled = $true
        Set-LogProperties -LogDetails $logDeets
    } Catch {
        [array]$out += "There was a problem when attempting to enable the Microsoft-Windows-PrintService/Operational log"
    }

    $logCheck =  Get-WinEvent 'Microsoft-Windows-PrintService/Operational' -EA 0

    If ($logCheck) {
        $result = Get-WinEvent 'Microsoft-Windows-PrintService/Operational' | Where-Object { $_.Id -eq $BadEventId }

        If ($result) {
            [array]$out = "EventId 316 has been detected. This may be an indicator of attempted or successful exploit by CVE-2021-34527_PrintNightmare " + "`n" + $output
            [array]$out += "Output of detected event ID 316: $($result.Message)"
        } Else {
            [array]$out += "EventId 316 has NOT been detected, this machine has not been exploited."
        }
    } Else {
        [array]$out += "The Microsoft-Windows-PrintService/Operational log has no events to report!"
    }

    [array]$out += "Full error output: $($Error[0])"

    return $out -join "`n"
}

function Install-Patch (
    # the KB number of the patch you'd like to install
    [string]
    $PatchKb,

    # the URL to download the patch you'd like to install
    [string]
    $PatchUrl
) {
    # Make sure we have everything we need
    If (!$PatchUrl) {
        $out += "!Failed: Download URL not provided!"
        Return $out -join "`n"
    } ElseIf (!$PatchKb) {
        $out += "!Failed: KB number not provided!"
        Return $out -join "`n"
    }

    [array]$out
    $patchPath = "$patchDir\$PatchKb.msu"
    $hashFromUrl = $PatchUrl.split('_')[1].substring(0,40)
    $skipDownload = 0

    If (!(Test-Path -Path $patchDir -PathType Container)) {
        New-Item $patchDir -ItemType Directory | Out-Null
    }

    $out += "Detected $($PatchKb) is missing. Installing $($PatchKb)."

    # Check if file already exists and hash matches
    If (Test-Path -Path $patchPath) {
        # File exists so check hash
        $fileHash = (Get-FileHash -Path $patchPath -Algorithm 'SHA1').Hash
        If ($hashFromUrl -eq $fileHash) {
            # Hash matches, can skip download
            $skipDownload = 1
            $out += "$patchKb file already exists and the hash checks out. Will not redownload."
        } Else {
            # File exists, but hash does not match. Delete file.
            Remove-Item -Path $patchPath -Force
            $out += "$patchKb installation file existed, but the hash did not match. Deleted file. Will redownload."
        }
    }

    # If we need to download
    If (!$skipDownload) {
        $out += "Downloading $($PatchKb)..."

        Try {
            [Net.ServicePointManager]::SecurityProtocol = [Enum]::ToObject([Net.SecurityProtocolType], 3072)
            (New-Object System.Net.WebClient).DownloadFile($PatchUrl, $patchPath)
        } Catch {
            # Couldn't download. Exit early.
            $out += "There was an error downloading the patch from $PatchUrl -> $($Error[0])"
            Return $out -join "`n"
        }

        # Newly downloaded, so check hash
        $fileHash = (Get-FileHash -Path $patchPath -Algorithm 'SHA1').Hash

        # Check hash
        If ($hashFromUrl -eq $fileHash) {
            $out += "$patchKb file downloaded successfully. Hash check succeeded after download."
        } Else {
            # File exists, but hash does not match. Delete file. And exit early.
            Remove-Item -Path $patchPath -Force
            $out += "!Failed: $patchKb installation failed. The installation file was not successfully downloaded."
            Return $out -join "`n"
        }
    }

    # Install patch
    Try {
        $out += "Installing $($PatchKb)..."
        Start-Process -FilePath wusa.exe -ArgumentList """$patchPath"" /quiet /norestart /log:""$patchDir\$($PatchKb)-InstallLog.evt""" -Wait
    } Catch {
        # Installation failed.
        $out += "Installation failed. Full error output: $($Error[0])"
    }

    # If patch installed successfully
    If (Get-HotFix -Id $PatchKb -EA 0) {
        # Clean up downloaded patch
        Remove-Item -Path $patchPath -Force
        $out += "!SUCCESS: $PatchKb was successfully installed. Removed downloaded file."
    } Else {
        $out += "!FAILED: $PatchKb installation failed. Leaving downloaded file in place for future installation attempts."
    }

    Return $out -join "`n"
}

function Get-PnpFeaturesDisabled {
    $pnp1Enabled = (Get-ItemProperty -Path $PnpRegPath -Name "NoWarningNoElevationOnInstall" -EA 0).NoWarningNoElevationOnInstall
    $pnp2Enabled = (Get-ItemProperty -Path $PnpRegPath -Name "UpdatePromptSettings" -EA 0).UpdatePromptSettings

    If (!$pnp1Enabled -and !$pnp2Enabled) {
        Return 1
    } Else {
        Return 0
    }
}

<# ------------------------ Answer important questions ------------------------------------- #>

# If OS has compatible patch
If ($os -and $installHash.patchKbs.length) {
    $compatibleOs = 1

    # ..and an available hotfix OR cumulative is installed
    $installedPatches = $installHash.patchKBs | ForEach-Object { Get-Hotfix -Id $_ -EA 0 }
    If ($installedPatches) {
        $patchApplied = 1
    }
}

# If ACL mitigation is currently applied
If (Test-MitigationApplied) {
    $mitigationApplied = 1
}

# If bad Point and Print settings are disabled according to registry
$pnpDisabled = Get-PnpFeaturesDisabled

# If RestrictDriverInstallationToAdministrators is true
$restrictDriverInstallation = (Get-ItemProperty -Path $PnpRegPath -Name "RestrictDriverInstallationToAdministrators" -EA 0).RestrictDriverInstallationToAdministrators

# Previous installation attempted?
# Also need to check for previous versions of file... don't want to install if they exist either.
# $Null option included because some PCs in a previous version of the script did not have $hotfixKb set and could have resulted in that file name
$previousInstallAttemptPaths = @("$printNightmarePath\$os.txt", "$printNightmarePath\$os-$Null.txt")
$installHash.patchKBs | ForEach-Object {
    $previousInstallAttemptPaths += "$printNightmarePath\$os-$_.txt"
}

# If pnp reg settings exist and are enabled, in case an issue is caused and we need to know if pnp reg settings
# were originally enabled, save initial state
$pnpStatePath = "$printNightmarePath\pnpState.txt"

# If no file, no previous state is saved
If (!(Test-Path -Path $pnpStatePath)) {
    # if vulnerable pnp features are currently enabled
    If (!$pnpDisabled) {
        # Save current values to file
        $pnp1Enabled = (Get-ItemProperty -Path $PnpRegPath -Name "NoWarningNoElevationOnInstall" -EA 0).NoWarningNoElevationOnInstall
        $pnp2Enabled = (Get-ItemProperty -Path $PnpRegPath -Name "UpdatePromptSettings" -EA 0).UpdatePromptSettings

        New-Item $pnpStatePath -ItemType File -Force -Value "NoWarningNoElevationOnInstall=$pnp1Enabled,UpdatePromptSettings=$pnp2Enabled" | Out-Null
        $originalPnpDisabledValue = 0
    } Else {
        # The file doesn't exist, and pnp features are disabled, so don't save the state. No file means they were never enabled.
        $originalPnpDisabledValue = 1
    }
} Else {
    # we're only interested in whether the file exists for this value. Can review file for contents if necessary. The file does exist so they were enabled.
    $originalPnpDisabledValue = 0
}

<# ------------------------ Early exit points ------------------------------------- #>

# If print spooler is disabled, machine is not vulnerable and doesn't need any further remediation
If ((Get-WMIObject win32_service -Filter "Name='spooler'").StartMode -eq 'Disabled') {
    $output += "The print spooler is disabled, so no further mitigation/remediation is necessary."

    Remove-Mitigation
    $output += "If mitigation existed before, it has been removed. It is not necessary."

    # Exit Point
    Write-Output "outputLog=$($output -join '`n')|compatibleOs=$compatibleOs|originalPnpDisabledValue=$originalPnpDisabledValue|pnpVulnerableFeaturesDisabled=$pnpDisabled|mitigationApplied=0|patchApplied=$patchApplied|protected=1"
    Return
}

If ($os -eq 'Unknown') {
    $output += 'Exiting early since we are considering this unknown OS not vulnerable.'

    Remove-Mitigation
    $output += "If mitigation existed before, it has been removed. It is not necessary."
    Write-Output "outputLog=$($output -join '`n')|compatibleOs=$compatibleOs|originalPnpDisabledValue=$originalPnpDisabledValue|pnpVulnerableFeaturesDisabled=$pnpDisabled|mitigationApplied=0|patchApplied=$patchApplied|protected=1"
    Return
}

$previousInstallAttempted = (Test-Path -Path $previousInstallAttemptPaths) -contains $true

# If patch is not applied, the OS is compatible, but this has been tried before... it apparently did not succeed
If ((!$patchApplied -and $compatibleOs) -and $previousInstallAttempted) {
    $previousInstallAttemptPaths | ForEach-Object {
        If (Test-Path -Path $_) {
            $output += "Previous installation detected via existence of $_"
        }
    }

    $output += "Due to previous failed installation attempt, assuming this is an unsupported OS without ESU. Not trying installation of $($installHash.patchKBs[-1])."

    # Reapply mitigation
    $output += Apply-Mitigation

    If (Test-MitigationApplied) {
        $output += "ACL mitigation reapplied successfully."
        $protected = 1
        $mitigationApplied = 1
        $compatibleOs = 0
    } Else {
        If ($excludeFromMitigation) {
            $output += "Did not apply mitigation as this machine has been excluded."
        } Else {
            $output += "Applying the ACL mitigation did not work for some reason."
        }

        $protected = 0
        $mitigationApplied = 0
        $compatibleOs = 0
    }

    Write-Output "outputLog=$($output -join '`n')|compatibleOs=$compatibleOs|originalPnpDisabledValue=$originalPnpDisabledValue|pnpVulnerableFeaturesDisabled=$pnpDisabled|mitigationApplied=$mitigationApplied|patchApplied=$patchApplied|protected=$protected"
    Return
}

<# ------------------------ MITIGATION: Here is where the actual work starts ------------------------------------- #>

# If the OS does not have a compatible patch, and we didn't exit early due to excludeFromMitigation, disabled spooler, or unknown OS
# we MUST have mitigation. Machine is protected in this case.
If (!$compatibleOs) {
    $output += Apply-Mitigation

    If (Test-MitigationApplied) {
        $mitigationApplied = 1
        $protected = 1
    } Else {
        $mitigationApplied = 0
        $protected = 0
    }

    # Exit Point
    Write-Output "outputLog=$($output -join '`n')|compatibleOs=$compatibleOs|originalPnpDisabledValue=$originalPnpDisabledValue|pnpVulnerableFeaturesDisabled=$pnpDisabled|mitigationApplied=$mitigationApplied|patchApplied=$patchApplied|protected=$protected"
    Return
}

# If patch is not installed, install it
If (!$patchApplied) {
    $ssu = $installHash.ssu

    If ($ssu) {
        # SSU exists for this OS, let's see if it's already installed and if not, install it
        If (!(Get-HotFix -Id $ssu -EA 0)) {
            $ssuOutput = Install-Patch -PatchKb $ssu -PatchUrl $installHash.ssuUrl
        } Else {
            $ssuOutput = "SSU update $ssu is already installed."
        }
    } Else {
        $ssuOutput = "Skipping SSU installation, no new SSU exists for this OS."
    }

    # We don't care whether SSU installation succeeds, so no check for success. We still want to try installing the patch either way

    # Remove mitigation before install to avoid installation errors, since the mitigation involves removing permission from SYSTEM
    Remove-Mitigation
    $mitigationApplied = 0

    $output += "Removed mitigation temporarily during installation."

    # Install the KB. Always install the last KB in the list, should be the newest.
    $output += Install-Patch -PatchKb $installHash.patchKBs[-1] -PatchUrl $installHash.patchUrl

    # If the patch was sucessfully installed
    If ($output -like "*!SUCCESS*") {
        $patchApplied = 1
        New-Item $successfulInstallationMarkerPath -ItemType File -Force | Out-Null
    } Else {
        $patchApplied = 0
    }

    # We want the success message from the patch install at the beginning, so attach ssuOutput afterward
    $output += $ssuOutput
}

# If patch is installed
If ($patchApplied) {
    # A patch is applied. File marking successful installation doesn't exist, create it
    If (!$previousInstallAttempted) {
        $installedPatches | ForEach-Object {
            New-Item "$printNightmarePath\$os-$($_.HotFixID).txt" -ItemType File -Force | Out-Null
        }
    }

    If ($restrictDriverInstallation -eq 1) {
        # and driver installation restricted to admins, so protected
        $output += "Patch is installed and driver installation is restricted to administrators. Not Vulnerable!"
        $protected = 1
    } ElseIf (!$pnpDisabled) {
        # pnp vulnerable features are enabled. Need to disable them. If that fails, need to reapply ACL
        $protected = 0

        # Normalize $restrictDriverInstallation as it could be a non-integer value
        $restrictDriverInstallation = 0

        # It is possible to make this check more thorough if setting these reg keys to 0 causes issues.
        # Machine is still not remotely exploitable if machine is:
        # not DC, no folders are shared, no printers are shared, firewall is enabled, and firewall is blocking 135, 139, and 445
        # so we could potentially check for those and then set these reg keys back to 1 if necessary

        # PnP reg keys exist and are set to 1! That's no good. Let's set them to 0.
        Set-ItemProperty -Path $PnpRegPath -Name "NoWarningNoElevationOnInstall" -EA 0 -Value 0
        Set-ItemProperty -Path $PnpRegPath -Name "UpdatePromptSettings" -EA 0 -Value 0
        $output += "Pnp reg keys existed and were enabled, so set them to 0"

        # Check one last time...
        If (Get-PnpFeaturesDisabled) {
            # pnp vulnerable features are disabled and patch is installed!
            $pnpDisabled = 1
            $protected = 1
        } Else {
            $pnpDisabled = 0

            # pnp vulnerable features are still enabled so reapply mitigation
            $output += Apply-Mitigation
            If (Test-MitigationApplied) {
                $mitigationApplied = 1
                $protected = 1
            }
        }
    } Else {
        # Normalize $restrictDriverInstallation as it could be a non-integer value
        $restrictDriverInstallation = 0

        # Ensure mitigation is not in place
        Remove-Mitigation
        $mitigationApplied = 0

        # Patch is applied, ACL mitigation is removed, pnp settings are disabled, all good!
        $output += "Patch was already applied and vulnerable pnp settings are disabled. Not vulnerable. Removed ACL mitigation if existed."
        $protected = 1
    }
} Else {
    # Patch is still not installed so reapply mitigation
    $output += Apply-Mitigation

    If (Test-MitigationApplied) {
        $mitigationApplied = 1
        $protected = 1
    } Else {
        $mitigationApplied = 0
        $protected = 0
    }
}

Write-Output "outputLog=$($output -join '`n')|compatibleOs=$compatibleOs|originalPnpDisabledValue=$originalPnpDisabledValue|pnpVulnerableFeaturesDisabled=$pnpDisabled|mitigationApplied=$mitigationApplied|patchApplied=$patchApplied|protected=$protected|restrictDriverInstallation=$restrictDriverInstallation"
Return
