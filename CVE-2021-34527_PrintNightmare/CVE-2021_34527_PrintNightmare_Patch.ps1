<#
    Table of Contents (Use find to jump):

    - Constants
    - Init vars
    - Gather info from environment
    - Determine which patch is applicable
    - Mitigation helper functions
    - Answer important questions
    - Early exit points
    - MITIGATION: Here is where the actual work starts
#>

<# ------------------------ Constants ------------------------------------- #>

$driverPath = "$ENV:windir\System32\spool\drivers"
$PnpRegPath = 'HKLM:\\SOFTWARE\Policies\Microsoft\Windows NT\Printers\PointAndPrint'
$ltPath = "$ENV:windir\LTSvc"
$patchDir = "$ltPath\Patching"

<# ------------------------ Init vars ------------------------------------- #>
# $output is an array that will hold various messages throughout the mitigation process
# and will eventually be returned as a single string joined together
$output = @()

# $os will be the os name + architecture (when necessary)
$os = ''

# If OS has compatible patch
$compatibleOs = 0
# If ACL mitigation is currently applied
$mitigationApplied = 0
# If patch is installed
$patchApplied = 0
# If Point and Print vulnerable features are disabled according to registry
$pnpDisabled = 0
# If Machine is protected from the vulnerability in some manner
$protected = 0
# If machine has restrictDriverInstallationToAdministrators enabled in registry
$restrictDriverInstallation = 0

# Will hold saved pnp reg settings state if exists
$originalPnpDisabledValue = ''

# possibly for future use.. can't find win10 example or way to test validity of approach
# $ESUWin7Year1 = (Get-WmiObject softwarelicensingproduct -filter "ID='77db037b-95c3-48d7-a3ab-a9c6d41093e0'" | Select LicenseStatus)
# $ESUWin7Year2 = (Get-WmiObject softwarelicensingproduct -filter "ID='0e00c25d-8795-4fb7-9572-3803d91b6880'" | Select LicenseStatus)
# $ESUWin7Year3 = (Get-WmiObject softwarelicensingproduct -filter "ID='4220f546-f522-46df-8202-4d07afd26454'" | Select LicenseStatus)
# $ESUWin2008Year1 = (Get-WmiObject softwarelicensingproduct -filter "ID='553673ed-6ddf-419c-a153-b760283472fd'" | Select LicenseStatus)
# $ESUWin2008Year2 = (Get-WmiObject softwarelicensingproduct -filter "ID='04fa0286-fa74-401e-bbe9-fbfbb158010d'" | Select LicenseStatus)
# $ESUWin2008Year3 = (Get-WmiObject softwarelicensingproduct -filter "ID='16c08c85-0c8b-4009-9b2b-f1f7319e45f9'" | Select LicenseStatus)

<# ------------------------ Gather info from environment ------------------------------------- #>

## Set simple names for OS' since things like R2 versions are complicated to parse out in swich statements
$osDeets = Get-WmiObject win32_operatingsystem
$osName = $osDeets.Caption
$osArch = $osDeets.OSArchitecture

If ($osName -like 'Microsoft Windows Server 2008*' -and $osName -notlike '*R2*') {
    $os = "2008_$osArch"
} ElseIf ($osName -like 'Microsoft Windows Server 2008 R2*') {
    $os = '2008r2'
} ElseIf ($osName -like 'Microsoft Windows Server 2012*' -and $osName -notlike '*R2*') {
    $os = '2012'
} ElseIf ($osName -like 'Microsoft Windows Server 2012 R2*') {
    $os = '2012r2'
} ElseIf ($osName -like 'Microsoft Windows Server 2016*') {
    $os = '2016'
} ElseIf ($osName -like 'Microsoft Windows Server 2019*') {
    $os = '2019'
} ElseIf ($osName -like 'Microsoft Windows 10*') {
    # get raw Windows version
    [int64]$rawVersion = [Windows.System.Profile.AnalyticsInfo,Windows.System.Profile,ContentType=WindowsRuntime].GetMember('get_VersionInfo').Invoke( $Null, $Null ).DeviceFamilyVersion

    # decode bits to version bytes
    $build = ( $rawVersion -band 0x00000000FFFF0000l ) -shr 16

    Switch ($build) {
        19043 { $os = '21H1' }
        19042 { $os = '20H2' }
        19041 { $os = '2004' }
        18363 { $os = '1909' }
        18362 { $os = '1903' }
        17763 { $os = '1809' }
        17134 { $os = '1803' }
        17134 { $os = '1803' }
        16299 { $os = '1709' }
        15063 { $os = '1703' }
        14393 { $os = '1607' }
        10586 { $os = '1511' }
        10240 { $os = '1507' }
    }

    $os += "_$osArch"
} ElseIf ($osName -like 'Microsoft Windows 8*') {
    $os = "8.1_$osArch"
} ElseIf ($osName -like 'Microsoft Windows 7*') {
    $os = "7_$osArch"
}

<# ------------------------ Determine which patch is applicable ------------------------------------- #>

Switch ($os) {
    '7_32-bit' {
        $kb =           'KB5004951'
        $cumulativeKb = 'KB5004951'
        $ssu =          'KB5004378'
        $cumulativeUrl ='http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows6.1-kb5004951-x86_09808f3b8a74ce862f6e21ba36617c5b9bd53a3d.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows6.1-kb5004378-x86_7f71df13245adc8c835fccdeba92303b08e26a10.msu'
    }
    '7_64-bit' {
        $kb =           'KB5004951'
        $ssu =          'KB5004378'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows6.1-kb5004951-x64_2fcf9eaa66615884884cc1cb9f75fc96294cbf2a.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows6.1-kb5004378-x64_e295e0dfb732d1d4712c6aa5ac72aa28a7067359.msu'
    }
    '2008_32-bit' {
        $kb =           'KB5004959'
        $ssu =          'KB4580971'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows6.0-kb5004959-x86_7d5c62a788b49b296de559b792a8e1cd5b3fad2d.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2020/10/windows6.0-kb4580971-x86_5a4cf976c650cf9b6a0800aaf6016726f4b08c7d.msu'
    }
    '2008_64-bit' {
        $kb =           'KB5004959'
        $ssu =          'KB4580971'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows6.0-kb5004959-x64_7bfadd426a5764d3a2886afbb73f727fae5e0f67.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2020/10/windows6.0-kb4580971-x64_619424830431f3fba3c6d086b5dbe3e1ddf42f1f.msu'
    }
    '2008r2' {
        $kb =           'KB5004951'
        $ssu =          'KB5004378'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows6.1-kb5004951-x64_2fcf9eaa66615884884cc1cb9f75fc96294cbf2a.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows6.1-kb5004378-x64_e295e0dfb732d1d4712c6aa5ac72aa28a7067359.msu'
    }
    '8.1_32-bit' {
        $kb =           'KB5004958'
        $cumulativeKb = 'KB5004958'
        $ssu =          'KB5001403'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows8.1-kb5004958-x86_ee2308010d7605cad53e19a1bc762d85d044d88d.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/04/windows8.1-kb5001403-x86_c59ac03777801436fa01dbf341f164a709ce8f8a.msu'
    }
    '8.1_64-bit' {
        $kb =           'KB5004958'
        $cumulativeKb = 'KB5004958'
        $ssu =          'KB5001403'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows8.1-kb5004958-x64_8b73440b9c53bcea2660d9409b6ad3920f104cd2.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/04/windows8.1-kb5001403-x64_7f15c4b281f38d43475abb785a32dbaf0355bad5.msu'
    }
    '2012' {
        $kb =           'KB5004960'
        $cumulativeKb = 'KB5004960'
        $ssu =          'KB5001401'
        $cumulativeUrl ='http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows8-rt-kb5004960-x64_15b7362a1146198852b2be37c4997f81e16495b6.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/04/windows8-rt-kb5001401-x64_1027ae2c9888c2dfe0caadeafc506b3012789c56.msu'
    }
    '2012r2' {
        $kb =           'KB5004958'
        $cumulativeKb = 'KB5004958'
        $ssu =          'KB5001403'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows8.1-kb5004958-x64_8b73440b9c53bcea2660d9409b6ad3920f104cd2.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/04/windows8.1-kb5001403-x64_7f15c4b281f38d43475abb785a32dbaf0355bad5.msu'
    }
    '2016' {
        $kb =           'KB5004948'
        $cumulativeKb = 'KB5004238'
        $ssu =          'KB5001402'
        $cumulativeUrl ='http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004238-x64_e3dd1cf22b1146f2469ef31f5fec0f47c8b5960b.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/04/windows10.0-kb5001402-x64_0108fcc32c0594f8578c3787babb7d84e6363864.msu'
    }
    '2019' {
        $kb =           'KB5004947'
        $cumulativeKb = 'KB5004244'
        $ssu =          'KB5003711'
        $cumulativeUrl ='http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004244-x64_5685623313a6de061e0c42fed3391c29750a6b1b.msu'
        $ssuUrl =       'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/06/windows10.0-kb5003711-x64_577dc9cfe2e84d23b193aae2678b12e777fc7e55.msu'
    }
    # 1507-1809 KBs specify they're for Win10 LTSB, so they might be unlikely to install... Not sure how to check at the moment.. related to the ESU question..
    '1507_32-bit' {
        $kb =           'KB5004950'
        $cumulativeKb = 'KB5004249'
        $ssu =          'KB5001399'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004249-x86_3011a800a44f3a2bd0d2baedb7a2f21dfc71c10e.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/04/windows10.0-kb5001399-x64_d33c5bf98f9c323bdfd3d7103a5215cb874221a1.msu'
    }
    '1507_64-bit' {
        $kb =           'KB5004950'
        $cumulativeKb = 'KB5004249'
        $ssu =          'KB5001399'
        $cumulativeUrl ='http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004249-x64_38d93e844d6342c49b9df47247e54e60a41e4bb9.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/04/windows10.0-kb5001399-x86_e3fe821338f8dcc5b9abc712ce940f34b6ce4f9e.msu'
    }
    '1607_32-bit' {
        $kb =           'KB5004948'
        $cumulativeKb = 'KB5004238'
        $ssu =          'KB5001402'
        $cumulativeUrl ='http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004238-x86_8d000fa9d73ffb093affc1ab1f20270f6d5abdf2.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/04/windows10.0-kb5001402-x86_27a769112966bdc171f5f300bfd4819f02941f5a.msu'
    }
    '1607_64-bit' {
        $kb =           'KB5004948'
        $cumulativeKb = 'KB5004238'
        $ssu =          'KB5001402'
        $cumulativeUrl ='http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004238-x64_e3dd1cf22b1146f2469ef31f5fec0f47c8b5960b.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/04/windows10.0-kb5001402-x64_0108fcc32c0594f8578c3787babb7d84e6363864.msu'
    }
    '1809_32-bit' {
        $kb =           'KB5004947'
        $cumulativeKb = 'KB5004244'
        $ssu =          'KB5003711'
        $cumulativeUrl ='http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004244-x86_f3b02d749e702248c4932721f5f58c2fc6378684.msu'
        $ssuUrl =       'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/06/windows10.0-kb5003711-x86_70a7ef9f67506eaeac5ae1747e90220e04e22492.msu'
    }
    '1809_64-bit' {
        $kb =           'KB5004947'
        $cumulativeKb = 'KB5004244'
        $ssu =          'KB5003711'
        $cumulativeUrl ='http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004244-x64_5685623313a6de061e0c42fed3391c29750a6b1b.msu'
        $ssuUrl =       'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/06/windows10.0-kb5003711-x64_577dc9cfe2e84d23b193aae2678b12e777fc7e55.msu'
    }
    '1909_32-bit' {
        $kb =           'KB5004946'
        $cumulativeKb = 'KB5004245'
        $ssu =          'KB5004748'
        $cumulativeUrl ='http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004245-x86_1ff53f72381912f791e0a1a5fa3e2bbf41bdcf23.msu'
        $ssuUrl =       'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004748-x86_e456b8de1221c6e9ecfd9083fd3dbe2034325559.msu'
    }
    '1909_64-bit' {
        $kb =           'KB5004946'
        $cumulativeKb = 'KB5004245'
        $ssu =          'KB5004748'
        $cumulativeUrl ='http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004245-x64_1a7054d81cab082980ad25de1395987b94a79893.msu'
        $ssuUrl =       'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004748-x64_2327ee6b541a2665817cc211f2fb832cc98031ac.msu'
    }
    '2004_32-bit' {
        $kb =           'KB5004945'
        $cumulativeKb = 'KB5004237'
        $ssu =          'KB4598481'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004237-x86_571a793bba0b7d881e7076f83b7f1245ff41011f.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/01/windows10.0-kb4598481-x86_32286dd2d08021ce7ce35ee4855beb81c8d5f09e.msu'
    }
    '2004_64-bit' {
        $kb =           'KB5004945'
        $cumulativeKb = 'KB5004237'
        $ssu =          'KB4598481'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004237-x64_9a7c569f5656d99533e9e945e8063251758ce4c0.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/01/windows10.0-kb4598481-x64_749fe79fd2e31b145de37c2f9ebf4f711d174dc2.msu'
    }
    '20H2_32-bit' {
        $kb =           'KB5004945'
        $cumulativeKb = 'KB5004237'
        $ssu =          'KB4598481'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004237-x86_571a793bba0b7d881e7076f83b7f1245ff41011f.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/01/windows10.0-kb4598481-x86_32286dd2d08021ce7ce35ee4855beb81c8d5f09e.msu'
    }
    '20H2_64-bit' {
        $kb =           'KB5004945'
        $cumulativeKb = 'KB5004237'
        $ssu =          'KB4598481'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004237-x64_9a7c569f5656d99533e9e945e8063251758ce4c0.msu'
        $ssuUrl =       'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/01/windows10.0-kb4598481-x64_749fe79fd2e31b145de37c2f9ebf4f711d174dc2.msu'
    }
    # 21H12 doesn't currently have an SSU
    '21H1_32-bit' {
        $kb =           'KB5004945'
        $cumulativeKb = 'KB5004237'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004237-x86_571a793bba0b7d881e7076f83b7f1245ff41011f.msu'
    }
    '21H1_64-bit' {
        $kb =           'KB5004945'
        $cumulativeKb = 'KB5004237'
        $cumulativeUrl ='http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004237-x64_9a7c569f5656d99533e9e945e8063251758ce4c0.msu'
    }
    Default   {
        $kb = $Null
        $cumulativeKb = $Null
        $ssu = $Null
        $cumulativeUrl = $Null
        $ssuUrl = $Null
    }
}

<# ------------------------ Mitigation helper functions ------------------------------------- #>

function Test-MitigationApplied {
    Return ((Get-Item $driverPath).GetAccessControl('Access')).Access | Where-Object { $_.IdentityReference -eq 'NT AUTHORITY\SYSTEM' -and $_.AccessControlType -eq 'Deny' }
}

function Remove-Mitigation {
    if (Test-MitigationApplied) {
        $driverPath = "$ENV:windir\System32\spool\drivers"
        $Acl = (Get-Item $driverPath).GetAccessControl('Access')
        $Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("System", "Modify", "ContainerInherit, ObjectInherit", "None", "Deny")
        $Acl.RemoveAccessRule($Ar)
        Set-Acl $driverPath $Acl
    }
}

function Apply-Mitigation {
    $BadEventId = 316
    [array]$out

    # Needs testing. Throws error in some cases. I think just in powershell 7? Alternative would be `$Acl = Get-Acl $driverPath`
    $Acl = (Get-Item $driverPath).GetAccessControl('Access')
    $Ar = New-Object  System.Security.AccessControl.FileSystemAccessRule("System", "Modify", "ContainerInherit, ObjectInherit", "None", "Deny")
    $Acl.AddAccessRule($Ar)
    Set-Acl $driverPath $Acl

    If (Test-MitigationApplied) {
        [array]$out += "SYSTEM permissions were successfully set to DENY on the driver folders for the spooler service."
    } Else {
        [array]$out += "There was a problem restricting permission on the spooler driver folder. Output: $Error"
    }

    <#
        Ensures event log "Microsoft-Windows-PrintService/Operational" is enabled and checks for eventID 316
        on the "$ENV:windir\System32\spool\drivers" directory and its contents, which is the most reliable way
        (at the moment) to check for attempts or success at this exploit
    #>

    Try {
        # Enable logging (disabled by default)
        $logDeets = Get-LogProperties 'Microsoft-Windows-PrintService/Operational'
        $logDeets.Enabled = $true
        Set-LogProperties -LogDetails $logDeets
    } Catch {
        [array]$out += "There was a problem when attempting to enable the Microsoft-Windows-PrintService/Operational log"
    }

    $logCheck =  Get-WinEvent 'Microsoft-Windows-PrintService/Operational' -EA 0

    If ($logCheck) {
        $result = Get-WinEvent 'Microsoft-Windows-PrintService/Operational' | Where-Object { $_.Id -eq $BadEventId }

        If ($result) {
            [array]$out = "EventId 316 has been detected. This may be an indicator of attempted or successful exploit by CVE-2021-34527_PrintNightmare " + "`n" + $output
            [array]$out += "Output of detected event ID 316: $($result.Message)"
        } Else {
            [array]$out += "EventId 316 has NOT been detected, this machine has not been exploited."
        }
    } Else {
        [array]$out += "The Microsoft-Windows-PrintService/Operational log has no events to report!"
    }

    [array]$out += "Full error output: $Error"

    return $out -join "`n"
}

function Install-Patch (
    # the KB number of the patch you'd like to install
    [string]
    $PatchKb,

    # the URL to download the patch you'd like to install
    [string]
    $PatchUrl
) {
    # Make sure we have everything we need
    If (!$PatchUrl) {
        $out += "!Failed: Download URL not provided!"
        Return $out -join "`n"
    } ElseIf (!$PatchKb) {
        $out += "!Failed: KB number not provided!"
        Return $out -join "`n"
    }

    [array]$out
    $patchPath = "$patchDir\$PatchKb.msu"
    $hashFromUrl = $PatchUrl.split('_')[1].substring(0,40)
    $skipDownload = 0

    If (!(Test-Path -Path $patchDir -PathType Container)) {
        New-Item $patchDir -ItemType Directory | Out-Null
    }

    $out += "Detected $($PatchKb) is missing. Installing $($PatchKb)."

    # Check if file already exists and hash matches
    If (Test-Path -Path $patchPath) {
        # File exists so check hash
        $fileHash = (Get-FileHash -Path $patchPath -Algorithm 'SHA1').Hash
        If ($hashFromUrl -eq $fileHash) {
            # Hash matches, can skip download
            $skipDownload = 1
            $out += "$patchKb file already exists and the hash checks out. Will not redownload."
        } Else {
            # File exists, but hash does not match. Delete file.
            Remove-Item -Path $patchPath -Force
            $out += "$patchKb installation file existed, but the hash did not match. Deleted file. Will redownload."
        }
    }

    # If we need to download
    If (!$skipDownload) {
        $out += "Downloading $($PatchKb)..."

        Try {
            [Net.ServicePointManager]::SecurityProtocol = [Enum]::ToObject([Net.SecurityProtocolType], 3072)
            (New-Object System.Net.WebClient).DownloadFile($PatchUrl, $patchPath)
        } Catch {
            # Couldn't download. Exit early.
            $out += "There was an error downloading the patch from $PatchUrl -> $Error"
            Return $out -join "`n"
        }

        # Newly downloaded, so check hash
        $fileHash = (Get-FileHash -Path $patchPath -Algorithm 'SHA1').Hash

        # Check hash
        If ($hashFromUrl -eq $fileHash) {
            $out += "$patchKb file downloaded successfully. Hash check succeeded after download."
        } Else {
            # File exists, but hash does not match. Delete file. And exit early.
            Remove-Item -Path $patchPath -Force
            $out += "!Failed: $patchKb installation failed. The installation file was not successfully downloaded."
            Return $out -join "`n"
        }
    }

    # Install patch
    Try {
        $out += "Installing $($PatchKb)..."
        Start-Process -FilePath wusa.exe -ArgumentList """$patchPath"" /quiet /norestart /log:""$patchDir\$($PatchKb)-InstallLog.evt""" -Wait
    } Catch {
        # Installation failed.
        $out += "Installation failed."
    }

    # If patch installed successfully
    If (Get-HotFix -Id $PatchKb -EA 0) {
        # Clean up downloaded patch
        Remove-Item -Path $patchPath -Force
        $out += "!SUCCESS: $PatchKb was successfully installed. Removed downloaded file."
    } Else {
        $out += "!FAILED: $PatchKb installation failed. Leaving downloaded file in place for future installation attempts."
    }

    Return $out -join "`n"
}

function Get-PnpFeaturesDisabled {
    $pnp1Enabled = (Get-ItemProperty -Path $PnpRegPath -Name "NoWarningNoElevationOnInstall" -EA 0).NoWarningNoElevationOnInstall
    $pnp2Enabled = (Get-ItemProperty -Path $PnpRegPath -Name "UpdatePromptSettings" -EA 0).UpdatePromptSettings

    If (!$pnp1Enabled -and !$pnp2Enabled) {
        Return 1
    } Else {
        Return 0
    }
}

<# ------------------------ Answer important questions ------------------------------------- #>

# If OS has compatible patch
If ($os -and ($cumulativeKb -or $kb)) {
    $compatibleOs = 1
}

# If ACL mitigation is currently applied
If (Test-MitigationApplied) {
    $mitigationApplied = 1
}

# If it is a compatible OS and an available hotfix OR cumulative is installed
If ($compatibleOs -and ((Get-HotFix -Id $cumulativeKb -EA 0) -or (Get-HotFix -Id $kb -EA 0))) {
    $patchApplied = 1
}

# If bad Point and Print settings are disabled according to registry
$pnpDisabled = Get-PnpFeaturesDisabled

# If RestrictDriverInstallationToAdministrators is true
$restrictDriverInstallation = (Get-ItemProperty -Path $PnpRegPath -Name "RestrictDriverInstallationToAdministrators" -EA 0).RestrictDriverInstallationToAdministrators

# If pnp reg settings exist and are enabled, in case an issue is caused and we need to know if pnp reg settings
# were originally enabled, save initial state
$path = "$ltPath\security\printnightmare\pnpState.txt"

# If no file, no previous state is saved
If (!(Test-Path -Path $path)) {
    # if vulnerable pnp features are currently enabled
    If (!$pnpDisabled) {
        # Save current values to file
        $pnp1Enabled = (Get-ItemProperty -Path $PnpRegPath -Name "NoWarningNoElevationOnInstall" -EA 0).NoWarningNoElevationOnInstall
        $pnp2Enabled = (Get-ItemProperty -Path $PnpRegPath -Name "UpdatePromptSettings" -EA 0).UpdatePromptSettings

        New-Item $path -ItemType File -Force -Value "NoWarningNoElevationOnInstall=$pnp1Enabled,UpdatePromptSettings=$pnp2Enabled" | Out-Null
        $originalPnpDisabledValue = 0
    } Else {
        # The file doesn't exist, and pnp features are disabled, so don't save the state. No file means they were never enabled.
        $originalPnpDisabledValue = 1
    }
} Else {
    # we're only interested in whether the file exists for this value. Can review file for contents if necessary. The file does exist so they were enabled.
    $originalPnpDisabledValue = 0
}

<# ------------------------ Early exit points ------------------------------------- #>

# If print spooler is disabled, machine is not vulnerable and doesn't need any further remediation
If ((Get-WMIObject win32_service -Filter "Name='spooler'").StartMode -eq 'Disabled') {
    $output += "The print spooler is disabled, so no further mitigation/remediation is necessary."

    Remove-Mitigation
    $output += "If mitigation existed before, it has been removed. It is not necessary."

    # Exit Point
    Write-Output "outputLog=$($output -join '`n')|compatibleOs=$compatibleOs|originalPnpDisabledValue=$originalPnpDisabledValue|pnpVulnerableFeaturesDisabled=$pnpDisabled|mitigationApplied=0|patchApplied=$patchApplied|protected=1"
    Return
}

# If $excludeFromMitigation is 1, don't mitigate. Exit early, sending back answers.
If ($excludeFromMitigation -eq 1) {
    $output += "This machine was excluded from mitigation"

    If ($mitigationApplied -or ($patchApplied -and $pnpDisabled)) {
        $protected = 1
    } Else {
        $protected = 0
    }

    # Exit Point
    Write-Output "outputLog=$($output -join '`n')|compatibleOs=$compatibleOs|originalPnpDisabledValue=$originalPnpDisabledValue|pnpVulnerableFeaturesDisabled=$pnpDisabled|mitigationApplied=$mitigationApplied|patchApplied=$patchApplied|protected=$protected"
    Return
}

<# ------------------------ MITIGATION: Here is where the actual work starts ------------------------------------- #>

# If the OS does not have a compatible OS, and we didn't exit early due to excludeFromMitigation or disabled spooler,
# there is no patch so we MUST have mitigation. Machine is protected in this case.
If (!$compatibleOs) {
    $output += Apply-Mitigation
    $mitigationApplied = 1
    $protected = 1

    # Exit Point
    Write-Output "outputLog=$($output -join '`n')|compatibleOs=$compatibleOs|originalPnpDisabledValue=$originalPnpDisabledValue|pnpVulnerableFeaturesDisabled=$pnpDisabled|mitigationApplied=$mitigationApplied|patchApplied=$patchApplied|protected=$protected"
    Return
}

# If patch is not installed, install it
If (!$patchApplied) {
    If ($ssu) {
        # SSU exists for this OS, let's see if it's already installed and if not, install it
        If (!(Get-HotFix -Id $ssu -EA 0)) {
            $ssuOutput = Install-Patch -PatchKb $ssu -PatchUrl $ssuUrl
        } Else {
            $ssuOutput = "SSU update $ssu is already installed."
        }
    } Else {
        $ssuOutput = "Skipping SSU installation, no new SSU exists for this OS."
    }

    # We don't care whether SSU installation succeeds, so no check for success. We still want to try installing the patch either way

    # Remove mitigation before install to avoid installation errors, since the mitigation involves removing permission from SYSTEM
    Remove-Mitigation
    $mitigationApplied = 0

    $output += "outputLog=$($output -join ' `n')ation temporarily during installation."
    $output += Install-Patch -PatchKb $cumulativeKb -PatchUrl $cumulativeUrl

    # If the patch was sucessfully installed
    If ($output -like "*!SUCCESS*") {
        $patchApplied = 1
    } Else {
        $patchApplied = 0
    }

    $output += $ssuOutput
}

If ($patchApplied) {
    # Patch is installed
    If ($restrictDriverInstallation -eq 1) {
        # and driver installation restricted to admins, so protected
        $output += "Patch is installed and driver installation is restricted to administrators. Not Vulnerable!"
        $protected = 1
    } ElseIf (!$pnpDisabled) {
        # pnp vulnerable features are enabled. Need to disable them. If that fails, need to reapply ACL
        $protected = 0

        # Normalize $restrictDriverInstallation as it could be a non-integer value
        $restrictDriverInstallation = 0

        # It is possible to make this check more thorough if setting these reg keys to 0 causes issues.
        # Machine is still not remotely exploitable if machine is:
        # not DC, no folders are shared, no printers are shared, firewall is enabled, and firewall is blocking 135, 139, and 445
        # so we could potentially check for those and then set these reg keys back to 1 if necessary

        # PnP reg keys exist and are set to 1! That's no good. Let's set them to 0.
        Set-ItemProperty -Path $PnpRegPath -Name "NoWarningNoElevationOnInstall" -EA 0 -Value 0
        Set-ItemProperty -Path $PnpRegPath -Name "UpdatePromptSettings" -EA 0 -Value 0
        $output += "Pnp reg keys existed and were enabled, so set them to 0"

        # Check one last time...
        If (Get-PnpFeaturesDisabled) {
            # pnp vulnerable features are disabled and patch is installed!
            $pnpDisabled = 1
            $protected = 1
        } Else {
            $pnpDisabled = 0

            # pnp vulnerable features are still enabled so reapply mitigation
            $output += Apply-Mitigation
            If (Test-MitigationApplied) {
                $mitigationApplied = 1
                $protected = 1
            }
        }
    } Else {
        # Normalize $restrictDriverInstallation as it could be a non-integer value
        $restrictDriverInstallation = 0

        # Ensure mitigation is not in place
        Remove-Mitigation
        $mitigationApplied = 0

        # Patch is applied, ACL mitigation is removed, pnp settings are disabled, all good!
        $output += "Patch was already applied and vulnerable pnp settings are disabled. Not vulnerable. Removed ACL mitigation if existed."
        $protected = 1
    }
} Else {
    # Patch is still not installed so reapply mitigation
    $output += Apply-Mitigation
    $mitigationApplied = 1
    $protected = 1
}

Write-Output "outputLog=$($output -join '`n')|compatibleOs=$compatibleOs|originalPnpDisabledValue=$originalPnpDisabledValue|pnpVulnerableFeaturesDisabled=$pnpDisabled|mitigationApplied=$mitigationApplied|patchApplied=$patchApplied|protected=$protected|restrictDriverInstallation=$restrictDriverInstallation"
Return
