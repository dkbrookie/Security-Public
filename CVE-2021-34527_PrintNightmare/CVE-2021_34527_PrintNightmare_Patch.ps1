$os = $Null
$Path = "$ENV:windir\System32\spool\drivers"

function Test-MitigationApplied {
    Return ((Get-Item $Path).GetAccessControl('Access')).Access | Where-Object { $_.IdentityReference -eq 'NT AUTHORITY\SYSTEM' -and $_.AccessControlType -eq 'Deny' }
}

function Remove-Mitigation {
    if (Test-MitigationApplied) {
        $Path = "$ENV:windir\System32\spool\drivers"
        $Acl = (Get-Item $Path).GetAccessControl('Access')
        $Ar = New-Object System.Security.AccessControl.FileSystemAccessRule("System", "Modify", "ContainerInherit, ObjectInherit", "None", "Deny")
        $Acl.RemoveAccessRule($Ar)
        Set-Acl $Path $Acl
    }
}

function Apply-Mitigation {
    $BadEventId = 316
    [array]$output

    # Needs testing. Throws error in some cases. I think just in powershell 7? Alternative would be `$Acl = Get-Acl $Path`
    $Acl = (Get-Item $Path).GetAccessControl('Access')
    $Ar = New-Object  System.Security.AccessControl.FileSystemAccessRule("System", "Modify", "ContainerInherit, ObjectInherit", "None", "Deny")
    $Acl.AddAccessRule($Ar)
    Set-Acl $Path $Acl

    If (Test-MitigationApplied) {
        [array]$output += "SYSTEM permissions were successfully set to DENY on the driver folders for the spooler service."
    } Else {
        [array]$output += "There was a problem restricting permission on the spooler driver folder. Output: $Error"
    }

    <#
        Ensures event log "Microsoft-Windows-PrintService/Operational" is enabled and checks for eventID 316
        on the "$ENV:windir\System32\spool\drivers" directory and its contents, which is the most reliable way
        (at the moment) to check for attempts or success at this exploit
    #>

    Try {
        # Enable logging (disabled by default)
        $logDeets = Get-LogProperties 'Microsoft-Windows-PrintService/Operational'
        $logDeets.Enabled = $true
        Set-LogProperties -LogDetails $logDeets
    } Catch {
        [array]$output += "There was a problem when attempting to enable the Microsoft-Windows-PrintService/Operational log"
    }

    $logCheck =  Get-WinEvent 'Microsoft-Windows-PrintService/Operational' -EA 0

    If ($logCheck) {
        $result = Get-WinEvent 'Microsoft-Windows-PrintService/Operational' | Where-Object { $_.Id -eq $BadEventId }

        If ($result) {
            [array]$output = "EventId 316 has been detected. This may be an indicator of attempted or successful exploit by CVE-2021-34527_PrintNightmare " + "`n" + $output
            [array]$output += "Output of detected event ID 316: $($result.Message)"
        } Else {
            [array]$output += "EventId 316 has NOT been detected, this machine has not been exploited."
        }
    } Else {
        [array]$output += "The Microsoft-Windows-PrintService/Operational log has no events to report!"
    }

    [array]$output += "Full error output: $Error"

    return $output -join "`n"
}

## Set simple names for OS' since things like R2 versions are complicated to parse out in swich statements
$osDeets = Get-WmiObject win32_operatingsystem
$osName = $osDeets.Caption
$osArch = $osDeets.OSArchitecture

If ($osName -like 'Microsoft Windows Server 2008*' -and $osName -notlike '*R2*') {
    $os = "2008_$osArch"
} ElseIf ($osName -like 'Microsoft Windows Server 2008 R2*') {
    $os = '2008r2'
} ElseIf ($osName -like 'Microsoft Windows Server 2012*' -and $osName -notlike '*R2*') {
    $os = '2012'
} ElseIf ($osName -like 'Microsoft Windows Server 2012 R2*') {
    $os = '2012r2'
} ElseIf ($osName -like 'Microsoft Windows Server 2016*') {
    $os = '2016'
} ElseIf ($osName -like 'Microsoft Windows Server 2019*') {
    $os = '2019'
} ElseIf ($osName -like 'Microsoft Windows 10*') {
    # get raw Windows version
    [int64]$rawVersion = [Windows.System.Profile.AnalyticsInfo,Windows.System.Profile,ContentType=WindowsRuntime].GetMember('get_VersionInfo').Invoke( $Null, $Null ).DeviceFamilyVersion

    # decode bits to version bytes
    $build = ( $rawVersion -band 0x00000000FFFF0000l ) -shr 16

    Switch ($build) {
        19043 { $os = '21H1' }
        19042 { $os = '20H2' }
        19041 { $os = '2004' }
        18363 { $os = '1909' }
        18362 { $os = '1903' }
        17763 { $os = '1809' }
        17134 { $os = '1803' }
        17134 { $os = '1803' }
        16299 { $os = '1709' }
        15063 { $os = '1703' }
        14393 { $os = '1607' }
        10586 { $os = '1511' }
        10240 { $os = '1507' }
    }

    $os += "_$osArch"
} ElseIf ($osName -like 'Microsoft Windows 8*') {
    $os = "8.1_$osArch"
} ElseIf ($osName -like 'Microsoft Windows 7*') {
    $os = "7_$osArch"
} Else {
    $os = 'unsupported'
}

If ($os -eq 'unsupported') {
    # EXIT EARLY: Apply mitigation and exit early. OS is not supported by patch.
    $output = Apply-Mitigation
    Write-Output "!Warning: OS is unsupported. $Output"
    Return
}

Switch ($os) {
    '7_32-bit'      { $kb = 'KB5004951'; $url = 'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows6.1-kb5004951-x86_09808f3b8a74ce862f6e21ba36617c5b9bd53a3d.msu' }
    '7_64-bit'      { $kb = 'KB5004951'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows6.1-kb5004951-x64_2fcf9eaa66615884884cc1cb9f75fc96294cbf2a.msu' }
    '2008_32-bit'   { $kb = 'KB5004959'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows6.0-kb5004959-x86_7d5c62a788b49b296de559b792a8e1cd5b3fad2d.msu' }
    '2008_64-bit'   { $kb = 'KB5004959'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows6.0-kb5004959-x64_7bfadd426a5764d3a2886afbb73f727fae5e0f67.msu' }
    '2008r2'        { $kb = 'KB5004951'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows6.1-kb5004951-x64_2fcf9eaa66615884884cc1cb9f75fc96294cbf2a.msu' }
    '8.1_32-bit'    { $kb = 'KB5004958'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows8.1-kb5004958-x86_ee2308010d7605cad53e19a1bc762d85d044d88d.msu' }
    '8.1_64-bit'    { $kb = 'KB5004954'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows8.1-kb5004958-x64_8b73440b9c53bcea2660d9409b6ad3920f104cd2.msu' }
    '2012'          { $kb = 'KB5004960'; $url = 'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows8-rt-kb5004960-x64_15b7362a1146198852b2be37c4997f81e16495b6.msu' }
    '2012r2'        { $kb = 'KB5004958'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows8.1-kb5004958-x64_8b73440b9c53bcea2660d9409b6ad3920f104cd2.msu' }
    '2016'          { $kb = 'KB5004948'; $url = 'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004948-x64_206b586ca8f1947fdace0008ecd7c9ca77fd6876.msu' }
    '2019'          { $kb = 'KB5004947'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004947-x64_c00ea7cdbfc6c5c637873b3e5305e56fafc4c074.msu' }
    '1507_32-bit'   { $kb = 'KB5004950'; $url = 'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004950-x86_651a97e0e3240bdad318a460a4280a7db7b2ff4b.msu' }
    '1507_64-bit'   { $kb = 'KB5004950'; $url = 'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004950-x64_0486d81a882c5665c84248517687a5088ef26bf1.msu' }
    '1607_32-bit'   { $kb = 'KB5004948'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004948-x86_b8dd84f2def04dd3a1d7de42898f776359fb527b.msu' }
    '1607_64-bit'   { $kb = 'KB5004948'; $url = 'http://download.windowsupdate.com/d/msdownload/update/software/secu/2021/07/windows10.0-kb5004948-x64_206b586ca8f1947fdace0008ecd7c9ca77fd6876.msu' }
    '2004_32-bit'   { $kb = 'KB5004945'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004945-x86_c2550823b87bcdfd19ece438954db1cb45449590.msu' }
    '2004_64-bit'   { $kb = 'KB5004945'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004945-x64_db8eafe34a43930a0d7c54d6464ff78dad605fb7.msu' }
    '20H2_32-bit'   { $kb = 'KB5004945'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004945-x86_c2550823b87bcdfd19ece438954db1cb45449590.msu' }
    '20H2_64-bit'   { $kb = 'KB5004945'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004945-x64_db8eafe34a43930a0d7c54d6464ff78dad605fb7.msu' }
    '21H1_32-bit'   { $kb = 'KB5004945'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004945-x86_c2550823b87bcdfd19ece438954db1cb45449590.msu' }
    '21H1_64-bit'   { $kb = 'KB5004945'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004945-x64_db8eafe34a43930a0d7c54d6464ff78dad605fb7.msu' }
    '1909_32-bit'   { $kb = 'KB5004946'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004946-x86_61da9d07bc330ff34196f9724e3b2d26570883d0.msu' }
    '1909_64-bit'   { $kb = 'KB5004946'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004946-x64_ae43950737d20f3368f17f9ab9db28eccdf8cf26.msu' }
    '1809_32-bit'   { $kb = 'KB5004947'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004947-x86_2cd3b09c753c60d39cdc93bdec2d9f076cddf2e5.msu' }
    '1809_64-bit'   { $kb = 'KB5004947'; $url = 'http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/07/windows10.0-kb5004947-x64_c00ea7cdbfc6c5c637873b3e5305e56fafc4c074.msu' }
    Default { Write-Output "!Failed: OS is not supported OR something wrong with format of OS String - OS string is $os"; Return }
}

# If the patch is NOT installed
If (!(Get-HotFix -Id $kb -EA 0)) {
    'Vulnerable - No Matching KB Found. Starting remediation...'

    $patchDir = "$env:windir\LTSvc\Patching"
    If (!(Test-Path -Path $patchDir -PathType Container)) {
        New-Item $patchDir -ItemType Directory | Out-Null
    }

    Write-Output "Detected $($kb) is missing. Downloading/installing $($kb)."

    If (!$url) {
        Write-Output "!Failed: Unsupported OS! Download URL was empty!"
        Return
    }

    Write-Output "Downloading $($kb)..."

    Try {
        [Net.ServicePointManager]::SecurityProtocol = [Enum]::ToObject([Net.SecurityProtocolType], 3072)
        (New-Object System.Net.WebClient).DownloadFile($url,"$patchDir\$kb.msu")
    } Catch {
        Write-Output "!Failed: $url - There was an error downloading the file - $Error"
        Return
    }

    Try {
        # Remove mitigation before install to avoid installation errors, since the mitigation involves removing
        # permission from SYSTEM
        Remove-Mitigation

        Write-Output "Installing $($kb)..."
        Start-Process -FilePath wusa.exe -ArgumentList """$patchDir\$kb.msu"" /quiet /norestart /log:""$patchDir\$($kb)-InstallLog.evt""" -Wait
    } Catch {
        Apply-Mitigation
        Write-Output "!Failed: There was an error installing the file - $Error"
    }

    ## Clean up downloaded patches since a lot of these are pretty big
    Remove-Item -Path "$patchDir\*.msu" -Force

    # Check to make sure patch was installed. If not, return fail
    If (!(Get-HotFix -Id $kb -EA 0)) {
        $output = Apply-Mitigation
        Write-Output "!Failed: Installing patch failed. Applied mitigation instead. Mitigation output: $output"
        Return
    } Else {
        Remove-Mitigation
        Write-Output '!Success: PrintNightmare has been patched! Remote code execution via CVE-2021_34527 is not possible! Ensured that temp Mitigation is removed.'
    }
} Else {
    # The patch is installed, we can ensure mitigation is removed
    Remove-Mitigation
    Write-Output "!Success: PrintNightmare was already patched before this script started. Ensured that temp Mitigation is removed."
    Return
}
